// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String        @unique
  name         String?
  email        String        @unique
  profileImage String?
  quizzes      String[]      @default([])
  points       Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  certificates Certificate[]
  lectures     UserLecture[]
  Damage       Damage[]
  Exam         Exam[]
  ExamAttempt  ExamAttempt[]
}

model Certificate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  courseTitle String
  workload    Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseCmsId String
  userId      String?  @db.ObjectId
  points      Int
  User        User?    @relation(fields: [userId], references: [id])
}

model UserLecture {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  lectureCmsId String
  courseId     String
  userId       String?  @db.ObjectId
  createdAt    DateTime @default(now())
  User         User?    @relation(fields: [userId], references: [id])
}

model Damage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  User      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Exam {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  complete     Boolean?      @default(false)
  reproved     Boolean?      @default(false)
  lectureCMSid String
  userId       String        @db.ObjectId
  timeLimit    Int?          // em minutos
  passingScore Int?          // porcentagem mínima para aprovação
  User         User?         @relation(fields: [userId], references: [id])
  attempts     ExamAttempt[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ExamAttempt {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  examId         String   @db.ObjectId
  userId         String   @db.ObjectId
  answers        Json     // Array de respostas
  score          Float    @default(0)
  totalQuestions Int      @default(0)
  correctAnswers Int      @default(0)
  timeSpent      Int      @default(0) // em segundos
  passed         Boolean  @default(false)
  completedAt    DateTime?
  Exam           Exam?    @relation(fields: [examId], references: [id])
  User           User?    @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
